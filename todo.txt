import os
import subprocess
import paramiko

def connect_to_remote(hostname, port, username, password):
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh_client.connect(hostname, port=port, username=username, password=password)
    print(f"Connected to {hostname}")
    return ssh_client

def disconnect_from_remote(ssh_client):
    if ssh_client:
        ssh_client.close()
        print("Disconnected from the remote host")

def backup_file(port):
    source_file = ""
    dest_file = ""

    if port == 500:
        source_file = "/home/config/file1.txt"
        dest_file = "/home/config/file.bkp"
    elif port == 700:
        source_file = "/home/config/conf.txt"
        dest_file = "/home/config/conf.bkp"

    if source_file and dest_file:
        subprocess.run(["cp", source_file, dest_file])
        print(f"Backup created: {source_file} -> {dest_file}")
    else:
        print("Invalid port number")

def add_ldap_group(ssh_client):
    ldap_group = "DYFP_MYSD_HRPA,OU=Groups,OU=DT,"
    command = f'echo "{ldap_group}" >> /home/ldap/ro.conf'
    ssh_client.exec_command(command)
    print(f"LDAP group added to /home/ldap/ro.conf: {ldap_group}")

def create_command_file():
    command_content = "//create file\nuse admin\ndb.create role()\npriveleges:"
    with open("/home/commands/first.cmd", "w") as cmd_file:
        cmd_file.write(command_content)
    print("Command file created: /home/commands/first.cmd")

def chmod_command_file():
    subprocess.run(["chmod", "700", "/home/commands/first.cmd"])
    print("Command file chmoded to 700: /home/commands/first.cmd")

def execute_shell_script(ssh_client, port, role):
    script_path = "/home/sheel/scripts/create.ksh"
    command = f"{script_path} -p {port} -r {role}"
    ssh_client.exec_command(command)
    print(f"Shell script executed: {command}")

def check_role_creation(ssh_client, port, role):
    script_path = "/home/sheel/scripts/show_roles.ksh"
    command = f"{script_path} -p {port} -r {role}"
    _, stdout, _ = ssh_client.exec_command(command)
    output = stdout.read().decode('utf-8')
    print("Output of show_roles.ksh:")
    print(output)

def main():
    with open("lists.txt", "r") as file:
        for line in file:
            data = line.strip().split(',')
            hostname, port, username, password = data
            port = int(port)

            # Connect to remote host
            ssh_client = connect_to_remote(hostname, port, username, password)

            # Perform activities
            backup_file(port)
            add_ldap_group(ssh_client)
            create_command_file()
            chmod_command_file()
            execute_shell_script(ssh_client, port, "dtca")
            check_role_creation(ssh_client, port, "dtca")

            # Disconnect from remote host
            disconnect_from_remote(ssh_client)

if __name__ == "__main__":
    main()



import configparser

def compare_config_files(file1, file2):
    config1 = configparser.ConfigParser()
    config2 = configparser.ConfigParser()

    config1.read(file1)
    config2.read(file2)

    sections1 = set(config1.sections())
    sections2 = set(config2.sections())

    common_sections = sections1.intersection(sections2)
    different_sections = sections1.symmetric_difference(sections2)

    print("Common Sections:")
    print(common_sections)
    print("\nDifferent Sections:")
    print(different_sections)

    for section in common_sections:
        options1 = set(config1.options(section))
        options2 = set(config2.options(section))

        common_options = options1.intersection(options2)
        different_options = options1.symmetric_difference(options2)

        print(f"\nSection: {section}")
        print("Common Options:")
        print(common_options)
        print("Different Options:")
        print(different_options)

        for option in common_options:
            value1 = config1.get(section, option)
            value2 = config2.get(section, option)

            if value1 != value2:
                print(f"Difference in value for option '{option}':")
                print(f"  {file1}: {value1}")
                print(f"  {file2}: {value2}")

if __name__ == "__main__":
    file1_path = "config1.ini"
    file2_path = "config2.ini"

    compare_config_files(file1_path, file2_path)
